{
  "__type__": "cc.EffectAsset",
  "_name": "../1-helmet/pre-filter-envmap/pre-filter-envmap",
  "_objFlags": 0,
  "_native": "",
  "techniques": [
    {
      "passes": [
        {
          "program": "../1-helmet/pre-filter-envmap/pre-filter-envmap|pre-filter-vs:vert|pre-filter-fs:frag",
          "properties": {
            "roughness": {
              "type": 13
            }
          }
        }
      ]
    }
  ],
  "shaders": [
    {
      "hash": 98303958,
      "glsl4": {
        "vert": "\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(binding = 23) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nlayout(binding = 21) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out vec3 worldPos;\nvec4 vert () {\n  vec4 position;\n  position = vec4(a_position, 1.0);\n  worldPos = position.xyz;\n  return cc_matViewProj * cc_matWorld * position;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nlayout(binding = 26) uniform samplerCube cc_environment;\nlayout(location = 0) in vec3 worldPos;\nlayout(binding = 0) uniform Constant {\n  float roughness;\n};\nfloat DistributionGGX (vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = 3.14159265359 * denom * denom;\n  return nom / denom;\n}\nfloat VanDerCorpus (int n, int base) {\n  float invBase = 1.0 / float(base);\n  float denom   = 1.0;\n  float result  = 0.0;\n  for (int i = 0; i < 32; i++) {\n    if (n > 0) {\n      denom   = mod(float(n), 2.0);\n      result += denom * invBase;\n      invBase = invBase / 2.0;\n      n       = int(float(n) / 2.0);\n    }\n  }\n  return result;\n}\nvec2 HammersleyNoBitOps (int i, int N) {\n  return vec2(float(i) / float(N), VanDerCorpus(i, 2));\n}\nvec3 ImportanceSampleGGX (vec2 Xi, vec3 N, float roughness) {\n  float a = roughness * roughness;\n  float phi = 2.0 * 3.14159265359 * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n  vec3 H;\n  H.x = cos(phi) * sinTheta;\n  H.y = sin(phi) * sinTheta;\n  H.z = cosTheta;\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n}\nvec4 frag () {\n  vec3 N = normalize(worldPos);\n  vec3 R = N;\n  vec3 V = R;\n  const int SAMPLE_COUNT = 1024;\n  vec3 prefilteredColor = vec3(0.0);\n  float totalWeight = 0.0;\n  for(int i = 0; i < SAMPLE_COUNT; i++) {\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0) {\n      float D   = DistributionGGX(N, H, roughness);\n      float NdotH = max(dot(N, H), 0.0);\n      float HdotV = max(dot(H, V), 0.0);\n      float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n      float resolution = 512.0;\n      float saTexel  = 4.0 * 3.14159265359 / (6.0 * resolution * resolution);\n      float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);\n      float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);\n      vec4 envmap = fragTextureLod(cc_environment, L, mipLevel);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      prefilteredColor += env * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n  #if CC_USE_IBL == 2\n    float v = max(max(prefilteredColor.r, prefilteredColor.g), prefilteredColor.b);\n    float e = ceil(log2(v));\n    float s = 1.0 / pow(2.0, e);\n    return vec4(prefilteredColor * s, e * (1.0 / 255.0) + (128.0 / 255.0));\n  #else\n    return vec4(sqrt(prefilteredColor), 1.0);\n  #endif\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nuniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_nativeSize;\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n};\nout vec3 worldPos;\nvec4 vert () {\n  vec4 position;\n  position = vec4(a_position, 1.0);\n  worldPos = position.xyz;\n  return cc_matViewProj * cc_matWorld * position;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\nprecision highp float;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    return textureLod(tex, coord, lod);\n}\nuniform samplerCube cc_environment;\nin vec3 worldPos;\nuniform Constant {\n  float roughness;\n};\nfloat DistributionGGX (vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = 3.14159265359 * denom * denom;\n  return nom / denom;\n}\nfloat VanDerCorpus (int n, int base) {\n  float invBase = 1.0 / float(base);\n  float denom   = 1.0;\n  float result  = 0.0;\n  for (int i = 0; i < 32; i++) {\n    if (n > 0) {\n      denom   = mod(float(n), 2.0);\n      result += denom * invBase;\n      invBase = invBase / 2.0;\n      n       = int(float(n) / 2.0);\n    }\n  }\n  return result;\n}\nvec2 HammersleyNoBitOps (int i, int N) {\n  return vec2(float(i) / float(N), VanDerCorpus(i, 2));\n}\nvec3 ImportanceSampleGGX (vec2 Xi, vec3 N, float roughness) {\n  float a = roughness * roughness;\n  float phi = 2.0 * 3.14159265359 * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n  vec3 H;\n  H.x = cos(phi) * sinTheta;\n  H.y = sin(phi) * sinTheta;\n  H.z = cosTheta;\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n}\nvec4 frag () {\n  vec3 N = normalize(worldPos);\n  vec3 R = N;\n  vec3 V = R;\n  const int SAMPLE_COUNT = 1024;\n  vec3 prefilteredColor = vec3(0.0);\n  float totalWeight = 0.0;\n  for(int i = 0; i < SAMPLE_COUNT; i++) {\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0) {\n      float D   = DistributionGGX(N, H, roughness);\n      float NdotH = max(dot(N, H), 0.0);\n      float HdotV = max(dot(H, V), 0.0);\n      float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n      float resolution = 512.0;\n      float saTexel  = 4.0 * 3.14159265359 / (6.0 * resolution * resolution);\n      float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);\n      float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);\n      vec4 envmap = fragTextureLod(cc_environment, L, mipLevel);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      prefilteredColor += env * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n  #if CC_USE_IBL == 2\n    float v = max(max(prefilteredColor.r, prefilteredColor.g), prefilteredColor.b);\n    float e = ceil(log2(v));\n    float s = 1.0 / pow(2.0, e);\n    return vec4(prefilteredColor * s, e * (1.0 / 255.0) + (128.0 / 255.0));\n  #else\n    return vec4(sqrt(prefilteredColor), 1.0);\n  #endif\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
      },
      "glsl1": {
        "vert": "\nprecision highp float;\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nvarying vec3 worldPos;\nvec4 vert () {\n  vec4 position;\n  position = vec4(a_position, 1.0);\n  worldPos = position.xyz;\n  return cc_matViewProj * cc_matWorld * position;\n}\nvoid main() { gl_Position = vert(); }",
        "frag": "\n  #ifdef GL_EXT_shader_texture_lod\n    #extension GL_EXT_shader_texture_lod : enable\n  #endif\nprecision highp float;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec3 unpackRGBE (vec4 rgbe) {\n  return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return texture2DLodEXT(tex, coord, lod);\n    #else\n      return texture2D(tex, coord, lod);\n    #endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n    #ifdef GL_EXT_shader_texture_lod\n      return textureCubeLodEXT(tex, coord, lod);\n    #else\n      return textureCube(tex, coord, lod);\n    #endif\n}\nuniform samplerCube cc_environment;\nvarying vec3 worldPos;\nuniform float roughness;\nfloat DistributionGGX (vec3 N, vec3 H, float roughness) {\n  float a = roughness * roughness;\n  float a2 = a * a;\n  float NdotH = max(dot(N, H), 0.0);\n  float NdotH2 = NdotH * NdotH;\n  float nom = a2;\n  float denom = (NdotH2 * (a2 - 1.0) + 1.0);\n  denom = 3.14159265359 * denom * denom;\n  return nom / denom;\n}\nfloat VanDerCorpus (int n, int base) {\n  float invBase = 1.0 / float(base);\n  float denom   = 1.0;\n  float result  = 0.0;\n  for (int i = 0; i < 32; i++) {\n    if (n > 0) {\n      denom   = mod(float(n), 2.0);\n      result += denom * invBase;\n      invBase = invBase / 2.0;\n      n       = int(float(n) / 2.0);\n    }\n  }\n  return result;\n}\nvec2 HammersleyNoBitOps (int i, int N) {\n  return vec2(float(i) / float(N), VanDerCorpus(i, 2));\n}\nvec3 ImportanceSampleGGX (vec2 Xi, vec3 N, float roughness) {\n  float a = roughness * roughness;\n  float phi = 2.0 * 3.14159265359 * Xi.x;\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\n  vec3 H;\n  H.x = cos(phi) * sinTheta;\n  H.y = sin(phi) * sinTheta;\n  H.z = cosTheta;\n  vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\n  vec3 tangent   = normalize(cross(up, N));\n  vec3 bitangent = cross(N, tangent);\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\n  return normalize(sampleVec);\n}\nvec4 frag () {\n  vec3 N = normalize(worldPos);\n  vec3 R = N;\n  vec3 V = R;\n  const int SAMPLE_COUNT = 1024;\n  vec3 prefilteredColor = vec3(0.0);\n  float totalWeight = 0.0;\n  for(int i = 0; i < SAMPLE_COUNT; i++) {\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\n    vec3 H  = ImportanceSampleGGX(Xi, N, roughness);\n    vec3 L  = normalize(2.0 * dot(V, H) * H - V);\n    float NdotL = max(dot(N, L), 0.0);\n    if (NdotL > 0.0) {\n      float D   = DistributionGGX(N, H, roughness);\n      float NdotH = max(dot(N, H), 0.0);\n      float HdotV = max(dot(H, V), 0.0);\n      float pdf = D * NdotH / (4.0 * HdotV) + 0.0001;\n      float resolution = 512.0;\n      float saTexel  = 4.0 * 3.14159265359 / (6.0 * resolution * resolution);\n      float saSample = 1.0 / (float(SAMPLE_COUNT) * pdf + 0.0001);\n      float mipLevel = roughness == 0.0 ? 0.0 : 0.5 * log2(saSample / saTexel);\n      vec4 envmap = fragTextureLod(cc_environment, L, mipLevel);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n      prefilteredColor += env * NdotL;\n      totalWeight      += NdotL;\n    }\n  }\n  prefilteredColor = prefilteredColor / totalWeight;\n  #if CC_USE_IBL == 2\n    float v = max(max(prefilteredColor.r, prefilteredColor.g), prefilteredColor.b);\n    float e = ceil(log2(v));\n    float s = 1.0 / pow(2.0, e);\n    return vec4(prefilteredColor * s, e * (1.0 / 255.0) + (128.0 / 255.0));\n  #else\n    return vec4(sqrt(prefilteredColor), 1.0);\n  #endif\n}\nvoid main() { gl_FragColor = frag(); }"
      },
      "builtins": {
        "globals": {
          "blocks": [
            {
              "name": "CCGlobal",
              "defines": []
            }
          ],
          "samplers": [
            {
              "name": "cc_environment",
              "defines": []
            }
          ]
        },
        "locals": {
          "blocks": [
            {
              "name": "CCLocal",
              "defines": []
            }
          ],
          "samplers": []
        }
      },
      "defines": [
        {
          "name": "CC_USE_IBL",
          "type": "number",
          "defines": [],
          "range": [
            0,
            2
          ]
        }
      ],
      "blocks": [
        {
          "name": "Constant",
          "members": [
            {
              "name": "roughness",
              "type": 13,
              "count": 1
            }
          ],
          "defines": [],
          "binding": 0
        }
      ],
      "samplers": [],
      "attributes": [
        {
          "name": "a_position",
          "type": 15,
          "count": 1,
          "defines": [],
          "format": 32,
          "location": 0
        }
      ],
      "varyings": [
        {
          "name": "worldPos",
          "type": 15,
          "count": 1,
          "defines": [],
          "location": 0
        }
      ],
      "record": null,
      "name": "../1-helmet/pre-filter-envmap/pre-filter-envmap|pre-filter-vs:vert|pre-filter-fs:frag"
    }
  ],
  "combinations": []
}