// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: dance-vs:vert
      frag: dance-fs:frag
      properties: &props
        saturation: { value: 1 }
        value: { value: 1 }
        meshScale: { value: [1, 1] }
        speed: {}
        alpha: { value: 1 }
  - name: transparent
    passes:
    - vert: dance-vs:vert
      frag: dance-fs:frag
      depthStencilState:
        depthTest: true
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram dance-vs %{
  precision mediump float;
  #include <cc-global>
  #include <cc-local-batch>
  #include <input>

  in vec2 a_texCoord;
  out vec2 v_uv;

  vec4 vert () {
    vec4 position;
    CCVertInput(position);

    mat4 matWorld;
    CCGetWorldMatrix(matWorld);

    v_uv = a_texCoord;

    return cc_matViewProj * matWorld * position;
  }
}%

// Kudos to:
// https://www.shadertoy.com/view/lsBXDW
// https://www.shadertoy.com/view/4dBSRK
CCProgram dance-fs %{
  precision mediump float;
  #include <cc-global>
  #include <output>
  #include <common>

  in vec2 v_uv;

  uniform FragConstants {
    float saturation;
    float value;
    vec2 meshScale;
    vec2 speed;
    float alpha;
  };

  vec3 hsv2rgb (in vec3 hsv) {
    hsv.yz = clamp(hsv.yz, 0.0, 1.0);
    return hsv.z * (1.0 + 0.5 * hsv.y * (cos(2.0 * 3.14159 * (hsv.x + vec3(0.0, 2.0 / 3.0, 1.0 / 3.0))) - 1.0));
  }

  float rand (in vec2 seed) {
    return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 137.5453);
  }

  /**/
  vec4 frag () {
    vec2 frag = v_uv * meshScale * 10.0 + speed * cc_time.x;
    float random = rand(floor(frag));
    vec2 black = smoothstep(1.0, 0.8, cos(frag * PI * 2.0));
    vec3 color = hsv2rgb(vec3(random, saturation, value));
    color *= black.x * black.y * smoothstep(1.0, 0.0, length(fract(frag) - 0.5));
    float anim = 0.5 + 0.5 * cos(random + random * cc_time.x + cc_time.x + PI * 0.5);
    color *= anim;
    return CCFragOutput(vec4(color, anim * min(black.x, black.y) * alpha));
  }
  /**
  vec4 frag () {
    vec2  px = v_uv * 8.0 + offset;
    float id = 0.5 + 0.5 * cos(cc_time.x + sin(dot(floor(px + 0.5), vec2(113.1,17.81))) * 43758.545);
    vec3  co = 0.5 + 0.5 * cos(cc_time.x + 3.5 * id + vec3(0.0, 1.57, PI));
    vec2  pa = smoothstep(0.0, 0.2, id * (0.5 + 0.5 * cos(PI2 * px)));
    return vec4(co * pa.x * pa.y, 1.0);
  }
  /**/
}%
